name: Make release at JIRA
on:
  workflow_call:
    inputs:
      APP_NAME:
        description: "Application name"
        required: true
        type: string
      APP_VERSION:
        description: "Application version"
        required: true
        type: string
      URI:
        type: string
        required: false
    secrets:
      JIRA_API_KEY:
        required: true

jobs:
  release:
    runs-on: [ self-hosted, docker-runner ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: sha_commit
        run: echo "sha_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Get branch name and extract Jira issue ID
        id: extract_issue_id
        run: |
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          echo "Branch: $BRANCH_NAME"
          echo "branch=${BRANCH_NAME}" >> $GITHUB_ENV
          ISSUE_ID=$(echo "$BRANCH_NAME" | grep -oE '[A-Z]+-[0-9]+' || echo "")
          echo "Issue ID: ${ISSUE_ID}"
          echo "jira_issue_id=${ISSUE_ID}" >> $GITHUB_ENV

      - name: Create Jira component
        id: creat_jira_component
        if: env.jira_issue_id != ''
        run: |
          PROJECT=$(echo "${{ env.branch }}" | grep -oE '[A-Z]+')
          
          echo "Create Jira component ${{ env.APP_NAME }}. Project ${PROJECT}"
          
          CREATE_COMPONENT=$(cat <<EOF
          {
            "description": "Component ${{ env.APP_NAME }} created automatically",
            "name": "${{ env.APP_NAME }}",
            "project": "$PROJECT",
            "assigneeType": "PROJECT_LEAD"
          }
          EOF
          )

          echo "${CREATE_COMPONENT}"
          
          curl --silent \
            --request POST \
            --url "https://trend-it.atlassian.net/rest/api/3/component" \
            --header "Authorization: Basic ${{ secrets.JIRA_API_KEY }}" \
            --header "Content-Type: application/json" \
            --data "$CREATE_COMPONENT"
          
          echo "\nComponent: ${{ env.APP_NAME }}"
          echo "jira_component=${{ env.APP_NAME }}" >> $GITHUB_ENV

      - name: Update Jira issue with Component
        id: update_jira
        if: github.event.pull_request.merged != true && env.jira_issue_id != ''
        run: |
          echo "Updating Jira issue ${{ env.jira_issue_id }} set component: ${{ env.APP_NAME }}"

          SET_COMPONENT_JSON=$(cat <<EOF
          {
            "update": {
              "components": [
                {
                  "add": {
                    "name": "${{ env.jira_component }}"
                  }
                }
              ]
            }
          }
          EOF
          )

          HTTP_CODE=$(curl --silent --output /dev/null --write-out "%{http_code}" \
          --request PUT \
          --url "https://trend-it.atlassian.net/rest/api/3/issue/${{ env.jira_issue_id }}" \
          --header "Authorization: Basic ${{ secrets.JIRA_API_KEY }}" \
          --header "Content-Type: application/json" \
          --data "$SET_COMPONENT_JSON")
          
          if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
            echo  "Jira issue updated successfully with HTTP code $HTTP_CODE"
          else
            echo "Failed to update Jira issue. HTTP code: $HTTP_CODE"
            # exit 1
          fi

      - name: Create Jira release
        id: create_jira_release
        if: github.event.pull_request.merged == true
        run: |
          PROJECT=$(echo "${GITHUB_HEAD_REF}" | grep -oE '[A-Z]+')
          
          echo "Create Jira release ${{ env.APP_NAME }}-${{ env.APP_VERSION }}. Project ${PROJECT}"
          
          CREATE_RELEASE=$(cat <<EOF
          {
            "description": "Version ${{ env.APP_NAME }}-${{ env.APP_VERSION }} created automatically",
            "name": "${{ env.APP_NAME }}-${{ env.APP_VERSION }}",
            "project": "${PROJECT}",
            "released": true
          }
          EOF
          )

          echo "${CREATE_RELEASE}"
          
          curl --silent \
            --request POST \
            --url "https://trend-it.atlassian.net/rest/api/3/version" \
            --header "Authorization: Basic ${{ secrets.JIRA_API_KEY }}" \
            --header "Content-Type: application/json" \
            --data "$CREATE_RELEASE"
          
          echo "\nVersion: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}"
          echo "jira_version=${{ env.APP_NAME }}-${{ env.APP_VERSION }}" >> $GITHUB_ENV

      - name: Update Jira issue with Fix Versions
        id: update_jira_fix_version
        if: github.event.pull_request.merged == true
        run: |
          echo "Updating Jira issue ${{ env.jira_issue_id }} with Fix Version ${{ env.APP_NAME }}-${{ env.APP_VERSION }}"

          FIX_VERSION_JSON=$(cat <<EOF
          {
            "update": {
              "fixVersions": [
                {
                  "add": {
                    "name": "${{ env.jira_version }}"
                  }
                }
              ],
              "components": [
                {
                  "add": {
                    "name": "${{ env.APP_NAME }}"
                  }
                }
              ]
            }
          }
          EOF
          )

          HTTP_CODE=$(curl --silent --output /dev/null --write-out "%{http_code}" \
          --request PUT \
          --url "https://trend-it.atlassian.net/rest/api/3/issue/${{ env.jira_issue_id }}" \
          --header "Authorization: Basic ${{ secrets.JIRA_API_KEY }}" \
          --header "Content-Type: application/json" \
          --data "$FIX_VERSION_JSON")
          
          if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
            echo  "Jira issue updated successfully with HTTP code $HTTP_CODE"
          else
            echo "Failed to update Jira issue. HTTP code: $HTTP_CODE"
            exit 1
          fi

      - name: Adding ENV to comment
        if: ${{ env.jira_issue_id != '' }}
        id: adding_environment
        run: |
          echo "Updating Jira issue ${{ env.jira_issue_id }} with dev environment"

          COMMENT_JSON=$(cat <<EOF
          {
            "body": {
              "type": "doc",
              "version": 1,
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Успешно выполнен деплой",
                      "marks": [
                        {
                          "type": "strong"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "Окружение: "
                    },
                    {
                      "type": "text",
                      "text": "${{inputs.URI}}",
                      "marks": [
                        {
                          "type": "link",
                          "attrs": {
                            "href": "${{inputs.URI}}",
                            "title": "Окружение"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "SHA: "
                    },
                    {
                      "type": "text",
                      "text": "${{steps.sha_commit.outputs.sha_commit}}"
                    }
                  ]
                }
              ]
            }
          }
          EOF
          )

          echo "${COMMENT_JSON}"

          curl --silent \
            --request POST \
            --url "https://trend-it.atlassian.net/rest/api/3/issue/${{ env.jira_issue_id }}/comment" \
            --header "Authorization: Basic ${{ secrets.JIRA_API_KEY }}" \
            --header "Content-Type: application/json" \
            --header 'Accept: application/json' \
            --data "$COMMENT_JSON"

    env:
      APP_VERSION: ${{ inputs.APP_VERSION }}
      APP_NAME: ${{ inputs.APP_NAME }}
