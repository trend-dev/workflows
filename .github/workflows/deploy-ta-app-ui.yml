name: TA APP UI deployment

on:
  workflow_call:
    inputs:
      APP_NAME:
        type: string
        required: false
        default: ''
      APP_VERSION:
        type: string
        required: false
        default: ''
      LOCATION:
        type: string
        required: true
      DOCKER_REGISTRY:
        description: "Docker registry for helm chart"
        type: string
        required: false
        default: "docker-registry.trendagent.ru:5000"
      useCustom:
        type: string
        required: false
      copyImportmap:
        type: string
        required: false
    outputs:
      branch_name:
        description: "Custom Environment"
        value: ${{ jobs.deploy.outputs.customEnvironment }}
    secrets:
      TOKEN:
        required: true
      DOCKER_REGISTRY_USER:
        required: true
      DOCKER_REGISTRY_PASSWORD:
        required: true
      KUBE_CONFIG:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true

env:
  # AWS auth
  AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
  AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
  AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'
  REQUESTS_CA_BUNDLE: "/etc/ssl/certs/ca-certificates.crt"

jobs:
  release:
    runs-on: [ self-hosted, docker-runner ]
    permissions:
      contents: write
      packages: write
    environment:
      name: staging
      url: https://spb.${{ steps.getBranchName.outputs.branchName }}${{ steps.getBranchName.outputs.branchName != '' && '.' || '' }}trend-${{ inputs.LOCATION }}.tech
    outputs:
      customEnvironment: ${{ steps.getBranchName.outputs.branchName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: trend-dev/${{ inputs.APP_NAME }}
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}
          ref: ${{ github.ref_name }}

      - name: Check
        run: |
          echo ${{ inputs.APP_NAME }}
          echo ${{ inputs.APP_VERSION }}

      - id: getBranchName
        if: ${{ github.event.inputs.useCustom == 'true' }}
        run: |
          chmod +x scripts/prepare-ref-name.sh
          bash ./scripts/prepare-ref-name.sh ${{ github.ref_name }}

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.3

      - name: Add Kube config
        shell: bash
        run: |
          mkdir -p ~/.kube
          echo ${{ secrets.KUBE_CONFIG }} | base64 -d > ~/.kube/config

      - name: Update Chart
        uses: trend-dev/inplace-envsubst-action@main
        env:
          APP_NAME: ${{ inputs.APP_NAME }}
          APP_VERSION: ${{ inputs.APP_VERSION }}
        with:
          working-directory: tools/charts/${{ inputs.APP_NAME }}
          fail_on_missing_variables: "true"
          search_input: |
            {
            "patterns": [".+.yaml"],
            "files": ["Chart.yaml"],
            "depth": 1
            }

      - name: Configuring variables in manifests
        shell: bash
        run: |
          sed -i 's|(domain)|${{ steps.getBranchName.outputs.branchName }}${{ steps.getBranchName.outputs.branchName != '' && '.' || '' }}|g' ./tools/charts/${{ inputs.APP_NAME }}/templates/*.yaml
          sed -i 's|(uniqDomain)|${{ steps.getBranchName.outputs.branchName || inputs.LOCATION }}|g' ./tools/charts/${{ inputs.APP_NAME }}/templates/*.yaml

      - id: branchName
        run: echo "branchName=$(echo ${{ steps.getBranchName.outputs.branchName || inputs.LOCATION }})" >> $GITHUB_OUTPUT

      - name: Upgrade env
        shell: bash
        run: |
          helm registry login -u ${{ secrets.DOCKER_REGISTRY_USER }} -p ${{ secrets.DOCKER_REGISTRY_PASSWORD }} ${{ inputs.DOCKER_REGISTRY }}
          cd ./tools/charts/
          helm upgrade ${{ inputs.APP_NAME }}-${{ steps.branchName.outputs.branchName }} ./${{ inputs.APP_NAME }} --install --namespace ${{ inputs.LOCATION }}

      # Copy importmap.json from production to feature-env-domain
      - name: install AWS-cli
        if: ${{ github.event.inputs.copyImportmap == 'true' }}
        run: |
          sudo apt update && sudo apt install awscli -y
        shell: bash

      - name: Copy importmap from production
        if: ${{ github.event.inputs.copyImportmap == 'true' }}
        run: aws --endpoint-url=https://s3.ru-1.storage.selcloud.ru s3 cp s3://ta_modules/importmap/production s3://ta_modules/importmap/${{ steps.getBranchName.outputs.branchName || inputs.LOCATION }} --recursive
        shell: bash
